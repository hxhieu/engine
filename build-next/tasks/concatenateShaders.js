// load shader chunks and combine into single javascript file
// Borrow from ../build/build.js but make it async to maximise performance

require('../utils/endsWith');

const fs = require('fs');
const util = require('util');
const append = util.promisify(fs.appendFile);
const readFile = util.promisify(fs.readFile);
const readDir = util.promisify(fs.readdir);
const exists = util.promisify(fs.exists);
const unlink = util.promisify(fs.unlink);

const processAShader = async function (dir, file, ext, output, first) {
    // Header section
    if (first){
        await append(output, "// autogenerated at: " + new Date() + "\n");
    }
    const shaderPath = dir + file;
    const content = (await readFile(shaderPath, 'utf-8')).replace(new RegExp("[\\r\\n]+", "g"), "\\n");
    const name = file.split(".")[0] + ext;
    const data = util.format('pc.shaderChunks.%s = "%s";\n', name, content);
    await append(output, data);
}

const concatentateShaders = async function () {
    const output = '../src/graphics/program-lib/chunks/generated-shader-chunks.js';
    const dir = '../src/graphics/program-lib/chunks/';
    const promises = [];

    // Clean up
    if (await exists(output)) {
        await unlink(output);
    }

    const files = await readDir(dir);

    files.forEach(function (file, idx) {
        var ext = null;
        ext = file.endsWith(".vert") ? "VS" : ext;
        ext = file.endsWith(".frag") ? "PS" : ext;
        if (ext) {
            promises.push(processAShader(dir, file, ext, output, idx === 0));
        }
    });

    return Promise.all(promises);
};

module.exports = concatentateShaders;